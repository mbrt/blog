<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="602" onload="init(evt)" viewBox="0 0 1200 602" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="602" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">py-spy record -o logs/profile.svg -p 126006</text><text id="details" fill="rgb(0,0,0)" x="10" y="40.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="591.00"> </text><svg id="frames" x="10" width="1180" total_samples="4635"><g><title>readline (gzip.py:426) (5 samples, 0.11%)</title><rect x="0.1726%" y="420" width="0.1079%" height="15" fill="rgb(227,0,7)" fg:x="8" fg:w="5"/><text x="0.4226%" y="430.50"></text></g><g><title>readinto (_compression.py:67) (9 samples, 0.19%)</title><rect x="1.2298%" y="436" width="0.1942%" height="15" fill="rgb(217,0,24)" fg:x="57" fg:w="9"/><text x="1.4798%" y="446.50"></text></g><g><title>_read_eof (gzip.py:560) (8 samples, 0.17%)</title><rect x="1.5534%" y="468" width="0.1726%" height="15" fill="rgb(221,193,54)" fg:x="72" fg:w="8"/><text x="1.8034%" y="478.50"></text></g><g><title>_read_exact (gzip.py:436) (7 samples, 0.15%)</title><rect x="1.5750%" y="484" width="0.1510%" height="15" fill="rgb(248,212,6)" fg:x="73" fg:w="7"/><text x="1.8250%" y="494.50"></text></g><g><title>read (gzip.py:518) (13 samples, 0.28%)</title><rect x="1.5534%" y="452" width="0.2805%" height="15" fill="rgb(208,68,35)" fg:x="72" fg:w="13"/><text x="1.8034%" y="462.50"></text></g><g><title>read (gzip.py:520) (6 samples, 0.13%)</title><rect x="1.8339%" y="452" width="0.1294%" height="15" fill="rgb(232,128,0)" fg:x="85" fg:w="6"/><text x="2.0839%" y="462.50"></text></g><g><title>_read_gzip_header (gzip.py:458) (5 samples, 0.11%)</title><rect x="2.1143%" y="484" width="0.1079%" height="15" fill="rgb(207,160,47)" fg:x="98" fg:w="5"/><text x="2.3643%" y="494.50"></text></g><g><title>read (gzip.py:527) (8 samples, 0.17%)</title><rect x="2.0712%" y="452" width="0.1726%" height="15" fill="rgb(228,23,34)" fg:x="96" fg:w="8"/><text x="2.3212%" y="462.50"></text></g><g><title>_read_gzip_header (gzip.py:496) (8 samples, 0.17%)</title><rect x="2.0712%" y="468" width="0.1726%" height="15" fill="rgb(218,30,26)" fg:x="96" fg:w="8"/><text x="2.3212%" y="478.50"></text></g><g><title>read (gzip.py:100) (35 samples, 0.76%)</title><rect x="2.2654%" y="468" width="0.7551%" height="15" fill="rgb(220,122,19)" fg:x="105" fg:w="35"/><text x="2.5154%" y="478.50"></text></g><g><title>read (gzip.py:534) (46 samples, 0.99%)</title><rect x="2.2654%" y="452" width="0.9924%" height="15" fill="rgb(250,228,42)" fg:x="105" fg:w="46"/><text x="2.5154%" y="462.50"></text></g><g><title>read (gzip.py:99) (11 samples, 0.24%)</title><rect x="3.0205%" y="468" width="0.2373%" height="15" fill="rgb(240,193,28)" fg:x="140" fg:w="11"/><text x="3.2705%" y="478.50"></text></g><g><title>read (gzip.py:535) (125 samples, 2.70%)</title><rect x="3.2578%" y="452" width="2.6969%" height="15" fill="rgb(216,20,37)" fg:x="151" fg:w="125"/><text x="3.5078%" y="462.50">re..</text></g><g><title>read (gzip.py:537) (76 samples, 1.64%)</title><rect x="5.9547%" y="452" width="1.6397%" height="15" fill="rgb(206,188,39)" fg:x="276" fg:w="76"/><text x="6.2047%" y="462.50"></text></g><g><title>read (gzip.py:550) (23 samples, 0.50%)</title><rect x="7.6591%" y="452" width="0.4962%" height="15" fill="rgb(217,207,13)" fg:x="355" fg:w="23"/><text x="7.9091%" y="462.50"></text></g><g><title>readinto (_compression.py:68) (315 samples, 6.80%)</title><rect x="1.4239%" y="436" width="6.7961%" height="15" fill="rgb(231,73,38)" fg:x="66" fg:w="315"/><text x="1.6739%" y="446.50">readinto ..</text></g><g><title>iter_wat_records (main.py:94) (386 samples, 8.33%)</title><rect x="0.0000%" y="404" width="8.3279%" height="15" fill="rgb(225,20,46)" fg:x="0" fg:w="386"/><text x="0.2500%" y="414.50">iter_wat_rec..</text></g><g><title>readline (gzip.py:427) (373 samples, 8.05%)</title><rect x="0.2805%" y="420" width="8.0475%" height="15" fill="rgb(210,31,41)" fg:x="13" fg:w="373"/><text x="0.5305%" y="430.50">readline (g..</text></g><g><title>readinto (_compression.py:69) (5 samples, 0.11%)</title><rect x="8.2201%" y="436" width="0.1079%" height="15" fill="rgb(221,200,47)" fg:x="381" fg:w="5"/><text x="8.4701%" y="446.50"></text></g><g><title>_process_wat_records (main.py:159) (389 samples, 8.39%)</title><rect x="0.0000%" y="388" width="8.3927%" height="15" fill="rgb(226,26,5)" fg:x="0" fg:w="389"/><text x="0.2500%" y="398.50">_process_wat..</text></g><g><title>detect_encoding (json/__init__.py:246) (6 samples, 0.13%)</title><rect x="9.4498%" y="436" width="0.1294%" height="15" fill="rgb(249,33,26)" fg:x="438" fg:w="6"/><text x="9.6998%" y="446.50"></text></g><g><title>loads (json/__init__.py:341) (22 samples, 0.47%)</title><rect x="9.1478%" y="420" width="0.4746%" height="15" fill="rgb(235,183,28)" fg:x="424" fg:w="22"/><text x="9.3978%" y="430.50"></text></g><g><title>decode (json/decoder.py:337) (270 samples, 5.83%)</title><rect x="9.6224%" y="436" width="5.8252%" height="15" fill="rgb(221,5,38)" fg:x="446" fg:w="270"/><text x="9.8724%" y="446.50">decode ..</text></g><g><title>raw_decode (json/decoder.py:353) (266 samples, 5.74%)</title><rect x="9.7087%" y="452" width="5.7389%" height="15" fill="rgb(247,18,42)" fg:x="450" fg:w="266"/><text x="9.9587%" y="462.50">raw_dec..</text></g><g><title>_process_wat_record (main.py:177) (300 samples, 6.47%)</title><rect x="9.0615%" y="404" width="6.4725%" height="15" fill="rgb(241,131,45)" fg:x="420" fg:w="300"/><text x="9.3115%" y="414.50">_process..</text></g><g><title>loads (json/__init__.py:346) (274 samples, 5.91%)</title><rect x="9.6224%" y="420" width="5.9115%" height="15" fill="rgb(249,31,29)" fg:x="446" fg:w="274"/><text x="9.8724%" y="430.50">loads (j..</text></g><g><title>urlparse (urllib/parse.py:395) (10 samples, 0.22%)</title><rect x="15.8145%" y="436" width="0.2157%" height="15" fill="rgb(225,111,53)" fg:x="733" fg:w="10"/><text x="16.0645%" y="446.50"></text></g><g><title>etld1 (main.py:105) (22 samples, 0.47%)</title><rect x="15.6419%" y="420" width="0.4746%" height="15" fill="rgb(238,160,17)" fg:x="725" fg:w="22"/><text x="15.8919%" y="430.50"></text></g><g><title>intranges_contain (idna/intranges.py:44) (5 samples, 0.11%)</title><rect x="16.7638%" y="500" width="0.1079%" height="15" fill="rgb(214,148,48)" fg:x="777" fg:w="5"/><text x="17.0138%" y="510.50"></text></g><g><title>intranges_contain (idna/intranges.py:45) (14 samples, 0.30%)</title><rect x="16.8716%" y="500" width="0.3020%" height="15" fill="rgb(232,36,49)" fg:x="782" fg:w="14"/><text x="17.1216%" y="510.50"></text></g><g><title>intranges_contain (idna/intranges.py:49) (8 samples, 0.17%)</title><rect x="17.2600%" y="500" width="0.1726%" height="15" fill="rgb(209,103,24)" fg:x="800" fg:w="8"/><text x="17.5100%" y="510.50"></text></g><g><title>check_label (idna/core.py:257) (41 samples, 0.88%)</title><rect x="16.6775%" y="484" width="0.8846%" height="15" fill="rgb(229,88,8)" fg:x="773" fg:w="41"/><text x="16.9275%" y="494.50"></text></g><g><title>ulabel (idna/core.py:321) (61 samples, 1.32%)</title><rect x="16.4617%" y="468" width="1.3161%" height="15" fill="rgb(213,181,19)" fg:x="763" fg:w="61"/><text x="16.7117%" y="478.50"></text></g><g><title>check_label (idna/core.py:281) (10 samples, 0.22%)</title><rect x="17.5620%" y="484" width="0.2157%" height="15" fill="rgb(254,191,54)" fg:x="814" fg:w="10"/><text x="17.8120%" y="494.50"></text></g><g><title>alabel (idna/core.py:287) (68 samples, 1.47%)</title><rect x="16.3323%" y="452" width="1.4671%" height="15" fill="rgb(241,83,37)" fg:x="757" fg:w="68"/><text x="16.5823%" y="462.50"></text></g><g><title>encode (idna/core.py:392) (72 samples, 1.55%)</title><rect x="16.2891%" y="436" width="1.5534%" height="15" fill="rgb(233,36,39)" fg:x="755" fg:w="72"/><text x="16.5391%" y="446.50"></text></g><g><title>etld1 (main.py:109) (85 samples, 1.83%)</title><rect x="16.1165%" y="420" width="1.8339%" height="15" fill="rgb(226,3,54)" fg:x="747" fg:w="85"/><text x="16.3665%" y="430.50">e..</text></g><g><title>_extract_netloc (tldextract/tldextract.py:457) (6 samples, 0.13%)</title><rect x="18.0151%" y="468" width="0.1294%" height="15" fill="rgb(245,192,40)" fg:x="835" fg:w="6"/><text x="18.2651%" y="478.50"></text></g><g><title>extract_str (tldextract/tldextract.py:402) (16 samples, 0.35%)</title><rect x="17.9504%" y="452" width="0.3452%" height="15" fill="rgb(238,167,29)" fg:x="832" fg:w="16"/><text x="18.2004%" y="462.50"></text></g><g><title>etld1 (main.py:110) (20 samples, 0.43%)</title><rect x="17.9504%" y="420" width="0.4315%" height="15" fill="rgb(232,182,51)" fg:x="832" fg:w="20"/><text x="18.2004%" y="430.50"></text></g><g><title>__call__ (tldextract/tldextract.py:373) (20 samples, 0.43%)</title><rect x="17.9504%" y="436" width="0.4315%" height="15" fill="rgb(231,60,39)" fg:x="832" fg:w="20"/><text x="18.2004%" y="446.50"></text></g><g><title>_process_wat_record (main.py:183) (132 samples, 2.85%)</title><rect x="15.5987%" y="404" width="2.8479%" height="15" fill="rgb(208,69,12)" fg:x="723" fg:w="132"/><text x="15.8487%" y="414.50">_p..</text></g><g><title>_process_wat_record (main.py:197) (19 samples, 0.41%)</title><rect x="18.5329%" y="404" width="0.4099%" height="15" fill="rgb(235,93,37)" fg:x="859" fg:w="19"/><text x="18.7829%" y="414.50"></text></g><g><title>etld1 (main.py:100) (5 samples, 0.11%)</title><rect x="19.2665%" y="420" width="0.1079%" height="15" fill="rgb(213,116,39)" fg:x="893" fg:w="5"/><text x="19.5165%" y="430.50"></text></g><g><title>_hostinfo (urllib/parse.py:207) (11 samples, 0.24%)</title><rect x="20.4531%" y="452" width="0.2373%" height="15" fill="rgb(222,207,29)" fg:x="948" fg:w="11"/><text x="20.7031%" y="462.50"></text></g><g><title>_hostinfo (urllib/parse.py:208) (11 samples, 0.24%)</title><rect x="20.6904%" y="452" width="0.2373%" height="15" fill="rgb(206,96,30)" fg:x="959" fg:w="11"/><text x="20.9404%" y="462.50"></text></g><g><title>_hostinfo (urllib/parse.py:209) (17 samples, 0.37%)</title><rect x="20.9277%" y="452" width="0.3668%" height="15" fill="rgb(218,138,4)" fg:x="970" fg:w="17"/><text x="21.1777%" y="462.50"></text></g><g><title>_hostinfo (urllib/parse.py:214) (15 samples, 0.32%)</title><rect x="21.3592%" y="452" width="0.3236%" height="15" fill="rgb(250,191,14)" fg:x="990" fg:w="15"/><text x="21.6092%" y="462.50"></text></g><g><title>hostname (urllib/parse.py:166) (81 samples, 1.75%)</title><rect x="20.1079%" y="436" width="1.7476%" height="15" fill="rgb(239,60,40)" fg:x="932" fg:w="81"/><text x="20.3579%" y="446.50"></text></g><g><title>hostname (urllib/parse.py:171) (5 samples, 0.11%)</title><rect x="21.9633%" y="436" width="0.1079%" height="15" fill="rgb(206,27,48)" fg:x="1018" fg:w="5"/><text x="22.2133%" y="446.50"></text></g><g><title>hostname (urllib/parse.py:172) (5 samples, 0.11%)</title><rect x="22.0712%" y="436" width="0.1079%" height="15" fill="rgb(225,35,8)" fg:x="1023" fg:w="5"/><text x="22.3212%" y="446.50"></text></g><g><title>hostname (urllib/parse.py:173) (13 samples, 0.28%)</title><rect x="22.1791%" y="436" width="0.2805%" height="15" fill="rgb(250,213,24)" fg:x="1028" fg:w="13"/><text x="22.4291%" y="446.50"></text></g><g><title>urlparse (urllib/parse.py:374) (7 samples, 0.15%)</title><rect x="22.4595%" y="436" width="0.1510%" height="15" fill="rgb(247,123,22)" fg:x="1041" fg:w="7"/><text x="22.7095%" y="446.50"></text></g><g><title>_coerce_args (urllib/parse.py:125) (5 samples, 0.11%)</title><rect x="23.2147%" y="452" width="0.1079%" height="15" fill="rgb(231,138,38)" fg:x="1076" fg:w="5"/><text x="23.4647%" y="462.50"></text></g><g><title>_coerce_args (urllib/parse.py:126) (34 samples, 0.73%)</title><rect x="23.3225%" y="452" width="0.7335%" height="15" fill="rgb(231,145,46)" fg:x="1081" fg:w="34"/><text x="23.5725%" y="462.50"></text></g><g><title>urlparse (urllib/parse.py:394) (85 samples, 1.83%)</title><rect x="22.6106%" y="436" width="1.8339%" height="15" fill="rgb(251,118,11)" fg:x="1048" fg:w="85"/><text x="22.8606%" y="446.50">u..</text></g><g><title>_coerce_args (urllib/parse.py:132) (15 samples, 0.32%)</title><rect x="24.1208%" y="452" width="0.3236%" height="15" fill="rgb(217,147,25)" fg:x="1118" fg:w="15"/><text x="24.3708%" y="462.50"></text></g><g><title>_coerce_args (urllib/parse.py:126) (25 samples, 0.54%)</title><rect x="27.7023%" y="468" width="0.5394%" height="15" fill="rgb(247,81,37)" fg:x="1284" fg:w="25"/><text x="27.9523%" y="478.50"></text></g><g><title>_coerce_args (urllib/parse.py:129) (6 samples, 0.13%)</title><rect x="28.2416%" y="468" width="0.1294%" height="15" fill="rgb(209,12,38)" fg:x="1309" fg:w="6"/><text x="28.4916%" y="478.50"></text></g><g><title>urlsplit (urllib/parse.py:491) (68 samples, 1.47%)</title><rect x="27.2060%" y="452" width="1.4671%" height="15" fill="rgb(227,1,9)" fg:x="1261" fg:w="68"/><text x="27.4560%" y="462.50"></text></g><g><title>_coerce_args (urllib/parse.py:132) (14 samples, 0.30%)</title><rect x="28.3711%" y="468" width="0.3020%" height="15" fill="rgb(248,47,43)" fg:x="1315" fg:w="14"/><text x="28.6211%" y="478.50"></text></g><g><title>urlsplit (urllib/parse.py:494) (9 samples, 0.19%)</title><rect x="28.6731%" y="452" width="0.1942%" height="15" fill="rgb(221,10,30)" fg:x="1329" fg:w="9"/><text x="28.9231%" y="462.50"></text></g><g><title>urlsplit (urllib/parse.py:495) (9 samples, 0.19%)</title><rect x="28.8673%" y="452" width="0.1942%" height="15" fill="rgb(210,229,1)" fg:x="1338" fg:w="9"/><text x="29.1173%" y="462.50"></text></g><g><title>urlsplit (urllib/parse.py:497) (19 samples, 0.41%)</title><rect x="29.0615%" y="452" width="0.4099%" height="15" fill="rgb(222,148,37)" fg:x="1347" fg:w="19"/><text x="29.3115%" y="462.50"></text></g><g><title>urlsplit (urllib/parse.py:498) (26 samples, 0.56%)</title><rect x="29.4714%" y="452" width="0.5609%" height="15" fill="rgb(234,67,33)" fg:x="1366" fg:w="26"/><text x="29.7214%" y="462.50"></text></g><g><title>urlsplit (urllib/parse.py:499) (10 samples, 0.22%)</title><rect x="30.0324%" y="452" width="0.2157%" height="15" fill="rgb(247,98,35)" fg:x="1392" fg:w="10"/><text x="30.2824%" y="462.50"></text></g><g><title>urlsplit (urllib/parse.py:503) (26 samples, 0.56%)</title><rect x="30.3560%" y="452" width="0.5609%" height="15" fill="rgb(247,138,52)" fg:x="1407" fg:w="26"/><text x="30.6060%" y="462.50"></text></g><g><title>urlsplit (urllib/parse.py:504) (18 samples, 0.39%)</title><rect x="30.9169%" y="452" width="0.3883%" height="15" fill="rgb(213,79,30)" fg:x="1433" fg:w="18"/><text x="31.1669%" y="462.50"></text></g><g><title>urlsplit (urllib/parse.py:505) (13 samples, 0.28%)</title><rect x="31.3053%" y="452" width="0.2805%" height="15" fill="rgb(246,177,23)" fg:x="1451" fg:w="13"/><text x="31.5553%" y="462.50"></text></g><g><title>urlsplit (urllib/parse.py:506) (19 samples, 0.41%)</title><rect x="31.5858%" y="452" width="0.4099%" height="15" fill="rgb(230,62,27)" fg:x="1464" fg:w="19"/><text x="31.8358%" y="462.50"></text></g><g><title>urlsplit (urllib/parse.py:509) (22 samples, 0.47%)</title><rect x="31.9957%" y="452" width="0.4746%" height="15" fill="rgb(216,154,8)" fg:x="1483" fg:w="22"/><text x="32.2457%" y="462.50"></text></g><g><title>urlsplit (urllib/parse.py:510) (15 samples, 0.32%)</title><rect x="32.4703%" y="452" width="0.3236%" height="15" fill="rgb(244,35,45)" fg:x="1505" fg:w="15"/><text x="32.7203%" y="462.50"></text></g><g><title>_splitnetloc (urllib/parse.py:415) (7 samples, 0.15%)</title><rect x="33.2039%" y="468" width="0.1510%" height="15" fill="rgb(251,115,12)" fg:x="1539" fg:w="7"/><text x="33.4539%" y="478.50"></text></g><g><title>_splitnetloc (urllib/parse.py:416) (37 samples, 0.80%)</title><rect x="33.3549%" y="468" width="0.7983%" height="15" fill="rgb(240,54,50)" fg:x="1546" fg:w="37"/><text x="33.6049%" y="478.50"></text></g><g><title>_splitnetloc (urllib/parse.py:417) (5 samples, 0.11%)</title><rect x="34.1532%" y="468" width="0.1079%" height="15" fill="rgb(233,84,52)" fg:x="1583" fg:w="5"/><text x="34.4032%" y="478.50"></text></g><g><title>_splitnetloc (urllib/parse.py:418) (18 samples, 0.39%)</title><rect x="34.2611%" y="468" width="0.3883%" height="15" fill="rgb(207,117,47)" fg:x="1588" fg:w="18"/><text x="34.5111%" y="478.50"></text></g><g><title>urlsplit (urllib/parse.py:511) (105 samples, 2.27%)</title><rect x="32.7940%" y="452" width="2.2654%" height="15" fill="rgb(249,43,39)" fg:x="1520" fg:w="105"/><text x="33.0440%" y="462.50">u..</text></g><g><title>_splitnetloc (urllib/parse.py:419) (19 samples, 0.41%)</title><rect x="34.6494%" y="468" width="0.4099%" height="15" fill="rgb(209,38,44)" fg:x="1606" fg:w="19"/><text x="34.8994%" y="478.50"></text></g><g><title>urlsplit (urllib/parse.py:512) (7 samples, 0.15%)</title><rect x="35.0593%" y="452" width="0.1510%" height="15" fill="rgb(236,212,23)" fg:x="1625" fg:w="7"/><text x="35.3093%" y="462.50"></text></g><g><title>urlsplit (urllib/parse.py:513) (5 samples, 0.11%)</title><rect x="35.2104%" y="452" width="0.1079%" height="15" fill="rgb(242,79,21)" fg:x="1632" fg:w="5"/><text x="35.4604%" y="462.50"></text></g><g><title>urlsplit (urllib/parse.py:517) (12 samples, 0.26%)</title><rect x="35.3398%" y="452" width="0.2589%" height="15" fill="rgb(211,96,35)" fg:x="1638" fg:w="12"/><text x="35.5898%" y="462.50"></text></g><g><title>urlsplit (urllib/parse.py:520) (9 samples, 0.19%)</title><rect x="35.7713%" y="452" width="0.1942%" height="15" fill="rgb(253,215,40)" fg:x="1658" fg:w="9"/><text x="36.0213%" y="462.50"></text></g><g><title>urlsplit (urllib/parse.py:521) (16 samples, 0.35%)</title><rect x="35.9655%" y="452" width="0.3452%" height="15" fill="rgb(211,81,21)" fg:x="1667" fg:w="16"/><text x="36.2155%" y="462.50"></text></g><g><title>urlsplit (urllib/parse.py:522) (69 samples, 1.49%)</title><rect x="36.3107%" y="452" width="1.4887%" height="15" fill="rgb(208,190,38)" fg:x="1683" fg:w="69"/><text x="36.5607%" y="462.50"></text></g><g><title>&lt;lambda&gt; (&lt;string&gt;:1) (36 samples, 0.78%)</title><rect x="37.0227%" y="468" width="0.7767%" height="15" fill="rgb(235,213,38)" fg:x="1716" fg:w="36"/><text x="37.2727%" y="478.50"></text></g><g><title>urlparse (urllib/parse.py:395) (627 samples, 13.53%)</title><rect x="24.4444%" y="436" width="13.5275%" height="15" fill="rgb(237,122,38)" fg:x="1133" fg:w="627"/><text x="24.6944%" y="446.50">urlparse (urllib/par..</text></g><g><title>urlsplit (urllib/parse.py:523) (8 samples, 0.17%)</title><rect x="37.7994%" y="452" width="0.1726%" height="15" fill="rgb(244,218,35)" fg:x="1752" fg:w="8"/><text x="38.0494%" y="462.50"></text></g><g><title>urlparse (urllib/parse.py:396) (20 samples, 0.43%)</title><rect x="37.9720%" y="436" width="0.4315%" height="15" fill="rgb(240,68,47)" fg:x="1760" fg:w="20"/><text x="38.2220%" y="446.50"></text></g><g><title>urlparse (urllib/parse.py:397) (26 samples, 0.56%)</title><rect x="38.4035%" y="436" width="0.5609%" height="15" fill="rgb(210,16,53)" fg:x="1780" fg:w="26"/><text x="38.6535%" y="446.50"></text></g><g><title>urlparse (urllib/parse.py:400) (5 samples, 0.11%)</title><rect x="38.9860%" y="436" width="0.1079%" height="15" fill="rgb(235,124,12)" fg:x="1807" fg:w="5"/><text x="39.2360%" y="446.50"></text></g><g><title>urlparse (urllib/parse.py:401) (88 samples, 1.90%)</title><rect x="39.0939%" y="436" width="1.8986%" height="15" fill="rgb(224,169,11)" fg:x="1812" fg:w="88"/><text x="39.3439%" y="446.50">u..</text></g><g><title>&lt;lambda&gt; (&lt;string&gt;:1) (40 samples, 0.86%)</title><rect x="40.1294%" y="452" width="0.8630%" height="15" fill="rgb(250,166,2)" fg:x="1860" fg:w="40"/><text x="40.3794%" y="462.50"></text></g><g><title>etld1 (main.py:105) (1,013 samples, 21.86%)</title><rect x="19.3959%" y="420" width="21.8554%" height="15" fill="rgb(242,216,29)" fg:x="899" fg:w="1013"/><text x="19.6459%" y="430.50">etld1 (main.py:105)</text></g><g><title>urlparse (urllib/parse.py:402) (12 samples, 0.26%)</title><rect x="40.9924%" y="436" width="0.2589%" height="15" fill="rgb(230,116,27)" fg:x="1900" fg:w="12"/><text x="41.2424%" y="446.50"></text></g><g><title>encode (idna/core.py:385) (70 samples, 1.51%)</title><rect x="42.6753%" y="436" width="1.5102%" height="15" fill="rgb(228,99,48)" fg:x="1978" fg:w="70"/><text x="42.9253%" y="446.50"></text></g><g><title>encode (idna/core.py:386) (6 samples, 0.13%)</title><rect x="44.1855%" y="436" width="0.1294%" height="15" fill="rgb(253,11,6)" fg:x="2048" fg:w="6"/><text x="44.4355%" y="446.50"></text></g><g><title>encode (idna/core.py:388) (5 samples, 0.11%)</title><rect x="44.3581%" y="436" width="0.1079%" height="15" fill="rgb(247,143,39)" fg:x="2056" fg:w="5"/><text x="44.6081%" y="446.50"></text></g><g><title>encode (idna/core.py:391) (19 samples, 0.41%)</title><rect x="44.4660%" y="436" width="0.4099%" height="15" fill="rgb(236,97,10)" fg:x="2061" fg:w="19"/><text x="44.7160%" y="446.50"></text></g><g><title>alabel (idna/core.py:286) (23 samples, 0.50%)</title><rect x="45.2211%" y="452" width="0.4962%" height="15" fill="rgb(233,208,19)" fg:x="2096" fg:w="23"/><text x="45.4711%" y="462.50"></text></g><g><title>ulabel (idna/core.py:304) (13 samples, 0.28%)</title><rect x="46.2567%" y="468" width="0.2805%" height="15" fill="rgb(216,164,2)" fg:x="2144" fg:w="13"/><text x="46.5067%" y="478.50"></text></g><g><title>ulabel (idna/core.py:313) (19 samples, 0.41%)</title><rect x="46.5804%" y="468" width="0.4099%" height="15" fill="rgb(220,129,5)" fg:x="2159" fg:w="19"/><text x="46.8304%" y="478.50"></text></g><g><title>ulabel (idna/core.py:314) (44 samples, 0.95%)</title><rect x="46.9903%" y="468" width="0.9493%" height="15" fill="rgb(242,17,10)" fg:x="2178" fg:w="44"/><text x="47.2403%" y="478.50"></text></g><g><title>check_label (idna/core.py:245) (5 samples, 0.11%)</title><rect x="48.2416%" y="484" width="0.1079%" height="15" fill="rgb(242,107,0)" fg:x="2236" fg:w="5"/><text x="48.4916%" y="494.50"></text></g><g><title>check_label (idna/core.py:246) (16 samples, 0.35%)</title><rect x="48.3495%" y="484" width="0.3452%" height="15" fill="rgb(251,28,31)" fg:x="2241" fg:w="16"/><text x="48.5995%" y="494.50"></text></g><g><title>check_label (idna/core.py:247) (22 samples, 0.47%)</title><rect x="48.6947%" y="484" width="0.4746%" height="15" fill="rgb(233,223,10)" fg:x="2257" fg:w="22"/><text x="48.9447%" y="494.50"></text></g><g><title>check_label (idna/core.py:248) (7 samples, 0.15%)</title><rect x="49.1694%" y="484" width="0.1510%" height="15" fill="rgb(215,21,27)" fg:x="2279" fg:w="7"/><text x="49.4194%" y="494.50"></text></g><g><title>check_nfc (idna/core.py:154) (5 samples, 0.11%)</title><rect x="49.4498%" y="500" width="0.1079%" height="15" fill="rgb(232,23,21)" fg:x="2292" fg:w="5"/><text x="49.6998%" y="510.50"></text></g><g><title>check_label (idna/core.py:251) (27 samples, 0.58%)</title><rect x="49.3420%" y="484" width="0.5825%" height="15" fill="rgb(244,5,23)" fg:x="2287" fg:w="27"/><text x="49.5920%" y="494.50"></text></g><g><title>check_nfc (idna/core.py:155) (17 samples, 0.37%)</title><rect x="49.5577%" y="500" width="0.3668%" height="15" fill="rgb(226,81,46)" fg:x="2297" fg:w="17"/><text x="49.8077%" y="510.50"></text></g><g><title>check_hyphen_ok (idna/core.py:146) (10 samples, 0.22%)</title><rect x="50.1402%" y="500" width="0.2157%" height="15" fill="rgb(247,70,30)" fg:x="2324" fg:w="10"/><text x="50.3902%" y="510.50"></text></g><g><title>check_hyphen_ok (idna/core.py:147) (32 samples, 0.69%)</title><rect x="50.3560%" y="500" width="0.6904%" height="15" fill="rgb(212,68,19)" fg:x="2334" fg:w="32"/><text x="50.6060%" y="510.50"></text></g><g><title>check_hyphen_ok (idna/core.py:149) (16 samples, 0.35%)</title><rect x="51.0680%" y="500" width="0.3452%" height="15" fill="rgb(240,187,13)" fg:x="2367" fg:w="16"/><text x="51.3180%" y="510.50"></text></g><g><title>check_label (idna/core.py:252) (70 samples, 1.51%)</title><rect x="49.9245%" y="484" width="1.5102%" height="15" fill="rgb(223,113,26)" fg:x="2314" fg:w="70"/><text x="50.1745%" y="494.50"></text></g><g><title>check_label (idna/core.py:253) (62 samples, 1.34%)</title><rect x="51.4347%" y="484" width="1.3376%" height="15" fill="rgb(206,192,2)" fg:x="2384" fg:w="62"/><text x="51.6847%" y="494.50"></text></g><g><title>check_initial_combiner (idna/core.py:141) (45 samples, 0.97%)</title><rect x="51.8015%" y="500" width="0.9709%" height="15" fill="rgb(241,108,4)" fg:x="2401" fg:w="45"/><text x="52.0515%" y="510.50"></text></g><g><title>check_label (idna/core.py:255) (125 samples, 2.70%)</title><rect x="52.7724%" y="484" width="2.6969%" height="15" fill="rgb(247,173,49)" fg:x="2446" fg:w="125"/><text x="53.0224%" y="494.50">ch..</text></g><g><title>check_label (idna/core.py:256) (32 samples, 0.69%)</title><rect x="55.4693%" y="484" width="0.6904%" height="15" fill="rgb(224,114,35)" fg:x="2571" fg:w="32"/><text x="55.7193%" y="494.50"></text></g><g><title>intranges_contain (idna/intranges.py:42) (23 samples, 0.50%)</title><rect x="58.6192%" y="500" width="0.4962%" height="15" fill="rgb(245,159,27)" fg:x="2717" fg:w="23"/><text x="58.8692%" y="510.50"></text></g><g><title>_encode_range (idna/intranges.py:34) (16 samples, 0.35%)</title><rect x="60.6472%" y="516" width="0.3452%" height="15" fill="rgb(245,172,44)" fg:x="2811" fg:w="16"/><text x="60.8972%" y="526.50"></text></g><g><title>intranges_contain (idna/intranges.py:44) (205 samples, 4.42%)</title><rect x="59.1154%" y="500" width="4.4229%" height="15" fill="rgb(236,23,11)" fg:x="2740" fg:w="205"/><text x="59.3654%" y="510.50">intra..</text></g><g><title>_encode_range (idna/intranges.py:35) (118 samples, 2.55%)</title><rect x="60.9924%" y="516" width="2.5458%" height="15" fill="rgb(205,117,38)" fg:x="2827" fg:w="118"/><text x="61.2424%" y="526.50">_e..</text></g><g><title>intranges_contain (idna/intranges.py:45) (243 samples, 5.24%)</title><rect x="63.5383%" y="500" width="5.2427%" height="15" fill="rgb(237,72,25)" fg:x="2945" fg:w="243"/><text x="63.7883%" y="510.50">intran..</text></g><g><title>intranges_contain (idna/intranges.py:48) (24 samples, 0.52%)</title><rect x="68.7810%" y="500" width="0.5178%" height="15" fill="rgb(244,70,9)" fg:x="3188" fg:w="24"/><text x="69.0310%" y="510.50"></text></g><g><title>_decode_range (idna/intranges.py:38) (15 samples, 0.32%)</title><rect x="72.1467%" y="516" width="0.3236%" height="15" fill="rgb(217,125,39)" fg:x="3344" fg:w="15"/><text x="72.3967%" y="526.50"></text></g><g><title>intranges_contain (idna/intranges.py:49) (309 samples, 6.67%)</title><rect x="69.2988%" y="500" width="6.6667%" height="15" fill="rgb(235,36,10)" fg:x="3212" fg:w="309"/><text x="69.5488%" y="510.50">intranges..</text></g><g><title>_decode_range (idna/intranges.py:39) (162 samples, 3.50%)</title><rect x="72.4703%" y="516" width="3.4951%" height="15" fill="rgb(251,123,47)" fg:x="3359" fg:w="162"/><text x="72.7203%" y="526.50">_de..</text></g><g><title>intranges_contain (idna/intranges.py:50) (44 samples, 0.95%)</title><rect x="75.9655%" y="500" width="0.9493%" height="15" fill="rgb(221,13,13)" fg:x="3521" fg:w="44"/><text x="76.2155%" y="510.50"></text></g><g><title>intranges_contain (idna/intranges.py:53) (7 samples, 0.15%)</title><rect x="76.9148%" y="500" width="0.1510%" height="15" fill="rgb(238,131,9)" fg:x="3565" fg:w="7"/><text x="77.1648%" y="510.50"></text></g><g><title>intranges_contain (idna/intranges.py:54) (23 samples, 0.50%)</title><rect x="77.0658%" y="500" width="0.4962%" height="15" fill="rgb(211,50,8)" fg:x="3572" fg:w="23"/><text x="77.3158%" y="510.50"></text></g><g><title>_decode_range (idna/intranges.py:39) (15 samples, 0.32%)</title><rect x="77.2384%" y="516" width="0.3236%" height="15" fill="rgb(245,182,24)" fg:x="3580" fg:w="15"/><text x="77.4884%" y="526.50"></text></g><g><title>check_label (idna/core.py:257) (996 samples, 21.49%)</title><rect x="56.1597%" y="484" width="21.4887%" height="15" fill="rgb(242,14,37)" fg:x="2603" fg:w="996"/><text x="56.4097%" y="494.50">check_label (idna/core.py:257)</text></g><g><title>check_bidi (idna/core.py:73) (116 samples, 2.50%)</title><rect x="78.1661%" y="500" width="2.5027%" height="15" fill="rgb(246,228,12)" fg:x="3623" fg:w="116"/><text x="78.4161%" y="510.50">ch..</text></g><g><title>check_bidi (idna/core.py:74) (73 samples, 1.57%)</title><rect x="80.6688%" y="500" width="1.5750%" height="15" fill="rgb(213,55,15)" fg:x="3739" fg:w="73"/><text x="80.9188%" y="510.50"></text></g><g><title>check_bidi (idna/core.py:75) (8 samples, 0.17%)</title><rect x="82.2438%" y="500" width="0.1726%" height="15" fill="rgb(209,9,3)" fg:x="3812" fg:w="8"/><text x="82.4938%" y="510.50"></text></g><g><title>check_bidi (idna/core.py:77) (6 samples, 0.13%)</title><rect x="82.4164%" y="500" width="0.1294%" height="15" fill="rgb(230,59,30)" fg:x="3820" fg:w="6"/><text x="82.6664%" y="510.50"></text></g><g><title>check_bidi (idna/core.py:78) (92 samples, 1.98%)</title><rect x="82.5458%" y="500" width="1.9849%" height="15" fill="rgb(209,121,21)" fg:x="3826" fg:w="92"/><text x="82.7958%" y="510.50">c..</text></g><g><title>ulabel (idna/core.py:321) (1,697 samples, 36.61%)</title><rect x="48.0043%" y="468" width="36.6127%" height="15" fill="rgb(220,109,13)" fg:x="2225" fg:w="1697"/><text x="48.2543%" y="478.50">ulabel (idna/core.py:321)</text></g><g><title>check_label (idna/core.py:281) (323 samples, 6.97%)</title><rect x="77.6483%" y="484" width="6.9687%" height="15" fill="rgb(232,18,1)" fg:x="3599" fg:w="323"/><text x="77.8983%" y="494.50">check_lab..</text></g><g><title>ulabel (idna/core.py:322) (24 samples, 0.52%)</title><rect x="84.6170%" y="468" width="0.5178%" height="15" fill="rgb(215,41,42)" fg:x="3922" fg:w="24"/><text x="84.8670%" y="478.50"></text></g><g><title>alabel (idna/core.py:287) (1,835 samples, 39.59%)</title><rect x="45.7174%" y="452" width="39.5901%" height="15" fill="rgb(224,123,36)" fg:x="2119" fg:w="1835"/><text x="45.9674%" y="462.50">alabel (idna/core.py:287)</text></g><g><title>ulabel (idna/core.py:328) (5 samples, 0.11%)</title><rect x="85.1996%" y="468" width="0.1079%" height="15" fill="rgb(240,125,3)" fg:x="3949" fg:w="5"/><text x="85.4496%" y="478.50"></text></g><g><title>valid_label_length (idna/core.py:58) (13 samples, 0.28%)</title><rect x="85.5016%" y="468" width="0.2805%" height="15" fill="rgb(205,98,50)" fg:x="3963" fg:w="13"/><text x="85.7516%" y="478.50"></text></g><g><title>valid_label_length (idna/core.py:59) (19 samples, 0.41%)</title><rect x="85.7821%" y="468" width="0.4099%" height="15" fill="rgb(205,185,37)" fg:x="3976" fg:w="19"/><text x="86.0321%" y="478.50"></text></g><g><title>alabel (idna/core.py:288) (42 samples, 0.91%)</title><rect x="85.3074%" y="452" width="0.9061%" height="15" fill="rgb(238,207,15)" fg:x="3954" fg:w="42"/><text x="85.5574%" y="462.50"></text></g><g><title>encode (idna/core.py:392) (1,917 samples, 41.36%)</title><rect x="44.8759%" y="436" width="41.3592%" height="15" fill="rgb(213,199,42)" fg:x="2080" fg:w="1917"/><text x="45.1259%" y="446.50">encode (idna/core.py:392)</text></g><g><title>encode (idna/core.py:393) (5 samples, 0.11%)</title><rect x="86.2352%" y="436" width="0.1079%" height="15" fill="rgb(235,201,11)" fg:x="3997" fg:w="5"/><text x="86.4852%" y="446.50"></text></g><g><title>encode (idna/core.py:394) (7 samples, 0.15%)</title><rect x="86.3430%" y="436" width="0.1510%" height="15" fill="rgb(207,46,11)" fg:x="4002" fg:w="7"/><text x="86.5930%" y="446.50"></text></g><g><title>encode (idna/core.py:399) (15 samples, 0.32%)</title><rect x="86.5156%" y="436" width="0.3236%" height="15" fill="rgb(241,35,35)" fg:x="4010" fg:w="15"/><text x="86.7656%" y="446.50"></text></g><g><title>etld1 (main.py:109) (2,121 samples, 45.76%)</title><rect x="41.3808%" y="420" width="45.7605%" height="15" fill="rgb(243,32,47)" fg:x="1918" fg:w="2121"/><text x="41.6308%" y="430.50">etld1 (main.py:109)</text></g><g><title>encode (idna/core.py:400) (14 samples, 0.30%)</title><rect x="86.8393%" y="436" width="0.3020%" height="15" fill="rgb(247,202,23)" fg:x="4025" fg:w="14"/><text x="87.0893%" y="446.50"></text></g><g><title>_extract_netloc (tldextract/tldextract.py:439) (7 samples, 0.15%)</title><rect x="88.8889%" y="468" width="0.1510%" height="15" fill="rgb(219,102,11)" fg:x="4120" fg:w="7"/><text x="89.1389%" y="478.50"></text></g><g><title>_extract_netloc (tldextract/tldextract.py:440) (8 samples, 0.17%)</title><rect x="89.0399%" y="468" width="0.1726%" height="15" fill="rgb(243,110,44)" fg:x="4127" fg:w="8"/><text x="89.2899%" y="478.50"></text></g><g><title>_extract_netloc (tldextract/tldextract.py:441) (7 samples, 0.15%)</title><rect x="89.2125%" y="468" width="0.1510%" height="15" fill="rgb(222,74,54)" fg:x="4135" fg:w="7"/><text x="89.4625%" y="478.50"></text></g><g><title>_extract_netloc (tldextract/tldextract.py:447) (7 samples, 0.15%)</title><rect x="89.4714%" y="468" width="0.1510%" height="15" fill="rgb(216,99,12)" fg:x="4147" fg:w="7"/><text x="89.7214%" y="478.50"></text></g><g><title>_extract_netloc (tldextract/tldextract.py:455) (20 samples, 0.43%)</title><rect x="89.6440%" y="468" width="0.4315%" height="15" fill="rgb(226,22,26)" fg:x="4155" fg:w="20"/><text x="89.8940%" y="478.50"></text></g><g><title>_get_tld_extractor (tldextract/tldextract.py:534) (5 samples, 0.11%)</title><rect x="90.4639%" y="484" width="0.1079%" height="15" fill="rgb(217,163,10)" fg:x="4193" fg:w="5"/><text x="90.7139%" y="494.50"></text></g><g><title>suffix_index (tldextract/tldextract.py:672) (5 samples, 0.11%)</title><rect x="90.7443%" y="484" width="0.1079%" height="15" fill="rgb(213,25,53)" fg:x="4206" fg:w="5"/><text x="90.9943%" y="494.50"></text></g><g><title>suffix_index (tldextract/tldextract.py:673) (18 samples, 0.39%)</title><rect x="90.8522%" y="484" width="0.3883%" height="15" fill="rgb(252,105,26)" fg:x="4211" fg:w="18"/><text x="91.1022%" y="494.50"></text></g><g><title>_decode_punycode (tldextract/tldextract.py:705) (12 samples, 0.26%)</title><rect x="91.5426%" y="500" width="0.2589%" height="15" fill="rgb(220,39,43)" fg:x="4243" fg:w="12"/><text x="91.7926%" y="510.50"></text></g><g><title>_decode_punycode (tldextract/tldextract.py:706) (24 samples, 0.52%)</title><rect x="91.8015%" y="500" width="0.5178%" height="15" fill="rgb(229,68,48)" fg:x="4255" fg:w="24"/><text x="92.0515%" y="510.50"></text></g><g><title>ulabel (idna/core.py:325) (5 samples, 0.11%)</title><rect x="92.3840%" y="532" width="0.1079%" height="15" fill="rgb(252,8,32)" fg:x="4282" fg:w="5"/><text x="92.6340%" y="542.50"></text></g><g><title>decode (encodings/punycode.py:207) (5 samples, 0.11%)</title><rect x="92.3840%" y="548" width="0.1079%" height="15" fill="rgb(223,20,43)" fg:x="4282" fg:w="5"/><text x="92.6340%" y="558.50"></text></g><g><title>punycode_decode (encodings/punycode.py:194) (5 samples, 0.11%)</title><rect x="92.3840%" y="564" width="0.1079%" height="15" fill="rgb(229,81,49)" fg:x="4282" fg:w="5"/><text x="92.6340%" y="574.50"></text></g><g><title>suffix_index (tldextract/tldextract.py:674) (60 samples, 1.29%)</title><rect x="91.2406%" y="484" width="1.2945%" height="15" fill="rgb(236,28,36)" fg:x="4229" fg:w="60"/><text x="91.4906%" y="494.50"></text></g><g><title>_decode_punycode (tldextract/tldextract.py:709) (10 samples, 0.22%)</title><rect x="92.3193%" y="500" width="0.2157%" height="15" fill="rgb(249,185,26)" fg:x="4279" fg:w="10"/><text x="92.5693%" y="510.50"></text></g><g><title>decode (idna/core.py:430) (8 samples, 0.17%)</title><rect x="92.3625%" y="516" width="0.1726%" height="15" fill="rgb(249,174,33)" fg:x="4281" fg:w="8"/><text x="92.6125%" y="526.50"></text></g><g><title>suffix_index (tldextract/tldextract.py:675) (18 samples, 0.39%)</title><rect x="92.5351%" y="484" width="0.3883%" height="15" fill="rgb(233,201,37)" fg:x="4289" fg:w="18"/><text x="92.7851%" y="494.50"></text></g><g><title>suffix_index (tldextract/tldextract.py:677) (9 samples, 0.19%)</title><rect x="92.9881%" y="484" width="0.1942%" height="15" fill="rgb(221,78,26)" fg:x="4310" fg:w="9"/><text x="93.2381%" y="494.50"></text></g><g><title>_extract_netloc (tldextract/tldextract.py:457) (164 samples, 3.54%)</title><rect x="90.0755%" y="468" width="3.5383%" height="15" fill="rgb(250,127,30)" fg:x="4175" fg:w="164"/><text x="90.3255%" y="478.50">_ex..</text></g><g><title>suffix_index (tldextract/tldextract.py:701) (8 samples, 0.17%)</title><rect x="93.4412%" y="484" width="0.1726%" height="15" fill="rgb(230,49,44)" fg:x="4331" fg:w="8"/><text x="93.6912%" y="494.50"></text></g><g><title>_extract_netloc (tldextract/tldextract.py:485) (6 samples, 0.13%)</title><rect x="93.8511%" y="468" width="0.1294%" height="15" fill="rgb(229,67,23)" fg:x="4350" fg:w="6"/><text x="94.1011%" y="478.50"></text></g><g><title>_extract_netloc (tldextract/tldextract.py:489) (7 samples, 0.15%)</title><rect x="94.0237%" y="468" width="0.1510%" height="15" fill="rgb(249,83,47)" fg:x="4358" fg:w="7"/><text x="94.2737%" y="478.50"></text></g><g><title>_extract_netloc (tldextract/tldextract.py:490) (20 samples, 0.43%)</title><rect x="94.1748%" y="468" width="0.4315%" height="15" fill="rgb(215,43,3)" fg:x="4365" fg:w="20"/><text x="94.4248%" y="478.50"></text></g><g><title>_extract_netloc (tldextract/tldextract.py:496) (78 samples, 1.68%)</title><rect x="94.6494%" y="468" width="1.6828%" height="15" fill="rgb(238,154,13)" fg:x="4387" fg:w="78"/><text x="94.8994%" y="478.50"></text></g><g><title>extract_str (tldextract/tldextract.py:402) (393 samples, 8.48%)</title><rect x="87.8964%" y="452" width="8.4790%" height="15" fill="rgb(219,56,2)" fg:x="4074" fg:w="393"/><text x="88.1464%" y="462.50">extract_str ..</text></g><g><title>_schemeless_url (tldextract/remote.py:44) (23 samples, 0.50%)</title><rect x="96.7422%" y="484" width="0.4962%" height="15" fill="rgb(233,0,4)" fg:x="4484" fg:w="23"/><text x="96.9922%" y="494.50"></text></g><g><title>lenient_netloc (tldextract/remote.py:26) (40 samples, 0.86%)</title><rect x="96.4617%" y="468" width="0.8630%" height="15" fill="rgb(235,30,7)" fg:x="4471" fg:w="40"/><text x="96.7117%" y="478.50"></text></g><g><title>lenient_netloc (tldextract/remote.py:27) (8 samples, 0.17%)</title><rect x="97.3247%" y="468" width="0.1726%" height="15" fill="rgb(250,79,13)" fg:x="4511" fg:w="8"/><text x="97.5747%" y="478.50"></text></g><g><title>lenient_netloc (tldextract/remote.py:28) (7 samples, 0.15%)</title><rect x="97.4973%" y="468" width="0.1510%" height="15" fill="rgb(211,146,34)" fg:x="4519" fg:w="7"/><text x="97.7473%" y="478.50"></text></g><g><title>lenient_netloc (tldextract/remote.py:29) (7 samples, 0.15%)</title><rect x="97.6483%" y="468" width="0.1510%" height="15" fill="rgb(228,22,38)" fg:x="4526" fg:w="7"/><text x="97.8983%" y="478.50"></text></g><g><title>lenient_netloc (tldextract/remote.py:30) (11 samples, 0.24%)</title><rect x="97.7994%" y="468" width="0.2373%" height="15" fill="rgb(235,168,5)" fg:x="4533" fg:w="11"/><text x="98.0494%" y="478.50"></text></g><g><title>lenient_netloc (tldextract/remote.py:33) (7 samples, 0.15%)</title><rect x="98.0367%" y="468" width="0.1510%" height="15" fill="rgb(221,155,16)" fg:x="4544" fg:w="7"/><text x="98.2867%" y="478.50"></text></g><g><title>lenient_netloc (tldextract/remote.py:38) (11 samples, 0.24%)</title><rect x="98.1877%" y="468" width="0.2373%" height="15" fill="rgb(215,215,53)" fg:x="4551" fg:w="11"/><text x="98.4377%" y="478.50"></text></g><g><title>etld1 (main.py:110) (526 samples, 11.35%)</title><rect x="87.1413%" y="420" width="11.3484%" height="15" fill="rgb(223,4,10)" fg:x="4039" fg:w="526"/><text x="87.3913%" y="430.50">etld1 (main.py:11..</text></g><g><title>__call__ (tldextract/tldextract.py:373) (503 samples, 10.85%)</title><rect x="87.6375%" y="436" width="10.8522%" height="15" fill="rgb(234,103,6)" fg:x="4062" fg:w="503"/><text x="87.8875%" y="446.50">__call__ (tldext..</text></g><g><title>extract_str (tldextract/tldextract.py:403) (98 samples, 2.11%)</title><rect x="96.3754%" y="452" width="2.1143%" height="15" fill="rgb(227,97,0)" fg:x="4467" fg:w="98"/><text x="96.6254%" y="462.50">e..</text></g><g><title>etld1 (main.py:111) (26 samples, 0.56%)</title><rect x="98.4898%" y="420" width="0.5609%" height="15" fill="rgb(234,150,53)" fg:x="4565" fg:w="26"/><text x="98.7398%" y="430.50"></text></g><g><title>top_domain_under_public_suffix (tldextract/tldextract.py:284) (10 samples, 0.22%)</title><rect x="98.8350%" y="436" width="0.2157%" height="15" fill="rgb(228,201,54)" fg:x="4581" fg:w="10"/><text x="99.0850%" y="446.50"></text></g><g><title>_process_wat_record (main.py:198) (3,730 samples, 80.47%)</title><rect x="18.9428%" y="404" width="80.4746%" height="15" fill="rgb(222,22,37)" fg:x="878" fg:w="3730"/><text x="19.1928%" y="414.50">_process_wat_record (main.py:198)</text></g><g><title>etld1 (main.py:113) (17 samples, 0.37%)</title><rect x="99.0507%" y="420" width="0.3668%" height="15" fill="rgb(237,53,32)" fg:x="4591" fg:w="17"/><text x="99.3007%" y="430.50"></text></g><g><title>top_domain_under_public_suffix (tldextract/tldextract.py:284) (12 samples, 0.26%)</title><rect x="99.1586%" y="436" width="0.2589%" height="15" fill="rgb(233,25,53)" fg:x="4596" fg:w="12"/><text x="99.4086%" y="446.50"></text></g><g><title>_process_wat_record (main.py:200) (5 samples, 0.11%)</title><rect x="99.4606%" y="404" width="0.1079%" height="15" fill="rgb(210,40,34)" fg:x="4610" fg:w="5"/><text x="99.7106%" y="414.50"></text></g><g><title>_process_wat_record (main.py:201) (5 samples, 0.11%)</title><rect x="99.5685%" y="404" width="0.1079%" height="15" fill="rgb(241,220,44)" fg:x="4615" fg:w="5"/><text x="99.8185%" y="414.50"></text></g><g><title>_process_wat_records (main.py:162) (4,231 samples, 91.28%)</title><rect x="8.4358%" y="388" width="91.2837%" height="15" fill="rgb(235,28,35)" fg:x="391" fg:w="4231"/><text x="8.6858%" y="398.50">_process_wat_records (main.py:162)</text></g><g><title>all (4,635 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(210,56,17)" fg:x="0" fg:w="4635"/><text x="0.2500%" y="62.50"></text></g><g><title>&lt;module&gt; (main.py:304) (4,635 samples, 100.00%)</title><rect x="0.0000%" y="68" width="100.0000%" height="15" fill="rgb(224,130,29)" fg:x="0" fg:w="4635"/><text x="0.2500%" y="78.50">&lt;module&gt; (main.py:304)</text></g><g><title>__call__ (click/core.py:1442) (4,635 samples, 100.00%)</title><rect x="0.0000%" y="84" width="100.0000%" height="15" fill="rgb(235,212,8)" fg:x="0" fg:w="4635"/><text x="0.2500%" y="94.50">__call__ (click/core.py:1442)</text></g><g><title>main (click/core.py:1363) (4,635 samples, 100.00%)</title><rect x="0.0000%" y="100" width="100.0000%" height="15" fill="rgb(223,33,50)" fg:x="0" fg:w="4635"/><text x="0.2500%" y="110.50">main (click/core.py:1363)</text></g><g><title>invoke (click/core.py:1226) (4,635 samples, 100.00%)</title><rect x="0.0000%" y="116" width="100.0000%" height="15" fill="rgb(219,149,13)" fg:x="0" fg:w="4635"/><text x="0.2500%" y="126.50">invoke (click/core.py:1226)</text></g><g><title>invoke (click/core.py:794) (4,635 samples, 100.00%)</title><rect x="0.0000%" y="132" width="100.0000%" height="15" fill="rgb(250,156,29)" fg:x="0" fg:w="4635"/><text x="0.2500%" y="142.50">invoke (click/core.py:794)</text></g><g><title>main (main.py:298) (4,635 samples, 100.00%)</title><rect x="0.0000%" y="148" width="100.0000%" height="15" fill="rgb(216,193,19)" fg:x="0" fg:w="4635"/><text x="0.2500%" y="158.50">main (main.py:298)</text></g><g><title>map (main.py:251) (4,635 samples, 100.00%)</title><rect x="0.0000%" y="164" width="100.0000%" height="15" fill="rgb(216,135,14)" fg:x="0" fg:w="4635"/><text x="0.2500%" y="174.50">map (main.py:251)</text></g><g><title>submit (concurrent/futures/process.py:831) (4,635 samples, 100.00%)</title><rect x="0.0000%" y="180" width="100.0000%" height="15" fill="rgb(241,47,5)" fg:x="0" fg:w="4635"/><text x="0.2500%" y="190.50">submit (concurrent/futures/process.py:831)</text></g><g><title>_start_executor_manager_thread (concurrent/futures/process.py:770) (4,635 samples, 100.00%)</title><rect x="0.0000%" y="196" width="100.0000%" height="15" fill="rgb(233,42,35)" fg:x="0" fg:w="4635"/><text x="0.2500%" y="206.50">_start_executor_manager_thread (concurrent/futures/process.py:770)</text></g><g><title>_launch_processes (concurrent/futures/process.py:797) (4,635 samples, 100.00%)</title><rect x="0.0000%" y="212" width="100.0000%" height="15" fill="rgb(231,13,6)" fg:x="0" fg:w="4635"/><text x="0.2500%" y="222.50">_launch_processes (concurrent/futures/process.py:797)</text></g><g><title>_spawn_process (concurrent/futures/process.py:807) (4,635 samples, 100.00%)</title><rect x="0.0000%" y="228" width="100.0000%" height="15" fill="rgb(207,181,40)" fg:x="0" fg:w="4635"/><text x="0.2500%" y="238.50">_spawn_process (concurrent/futures/process.py:807)</text></g><g><title>start (multiprocessing/process.py:121) (4,635 samples, 100.00%)</title><rect x="0.0000%" y="244" width="100.0000%" height="15" fill="rgb(254,173,49)" fg:x="0" fg:w="4635"/><text x="0.2500%" y="254.50">start (multiprocessing/process.py:121)</text></g><g><title>_Popen (multiprocessing/context.py:282) (4,635 samples, 100.00%)</title><rect x="0.0000%" y="260" width="100.0000%" height="15" fill="rgb(221,1,38)" fg:x="0" fg:w="4635"/><text x="0.2500%" y="270.50">_Popen (multiprocessing/context.py:282)</text></g><g><title>__init__ (multiprocessing/popen_fork.py:19) (4,635 samples, 100.00%)</title><rect x="0.0000%" y="276" width="100.0000%" height="15" fill="rgb(206,124,46)" fg:x="0" fg:w="4635"/><text x="0.2500%" y="286.50">__init__ (multiprocessing/popen_fork.py:19)</text></g><g><title>_launch (multiprocessing/popen_fork.py:71) (4,635 samples, 100.00%)</title><rect x="0.0000%" y="292" width="100.0000%" height="15" fill="rgb(249,21,11)" fg:x="0" fg:w="4635"/><text x="0.2500%" y="302.50">_launch (multiprocessing/popen_fork.py:71)</text></g><g><title>_bootstrap (multiprocessing/process.py:314) (4,635 samples, 100.00%)</title><rect x="0.0000%" y="308" width="100.0000%" height="15" fill="rgb(222,201,40)" fg:x="0" fg:w="4635"/><text x="0.2500%" y="318.50">_bootstrap (multiprocessing/process.py:314)</text></g><g><title>run (multiprocessing/process.py:108) (4,635 samples, 100.00%)</title><rect x="0.0000%" y="324" width="100.0000%" height="15" fill="rgb(235,61,29)" fg:x="0" fg:w="4635"/><text x="0.2500%" y="334.50">run (multiprocessing/process.py:108)</text></g><g><title>_process_worker (concurrent/futures/process.py:263) (4,635 samples, 100.00%)</title><rect x="0.0000%" y="340" width="100.0000%" height="15" fill="rgb(219,207,3)" fg:x="0" fg:w="4635"/><text x="0.2500%" y="350.50">_process_worker (concurrent/futures/process.py:263)</text></g><g><title>map_wat_path (main.py:222) (4,635 samples, 100.00%)</title><rect x="0.0000%" y="356" width="100.0000%" height="15" fill="rgb(222,56,46)" fg:x="0" fg:w="4635"/><text x="0.2500%" y="366.50">map_wat_path (main.py:222)</text></g><g><title>run (main.py:151) (4,635 samples, 100.00%)</title><rect x="0.0000%" y="372" width="100.0000%" height="15" fill="rgb(239,76,54)" fg:x="0" fg:w="4635"/><text x="0.2500%" y="382.50">run (main.py:151)</text></g></svg></svg>